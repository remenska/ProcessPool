%%% START HERE
sort Task = struct T1 | T2 | T3;
sort Worker = struct W(id:Nat,isWorking:Bool);

%% ============ ProcessPool
act r_getMaxSize, s_getMaxSize, getMaxSize:Nat;
act r_getMinSize, s_getMinSize, getMinSize:Nat;
act r_getNumWorkingProcesses, s_getNumWorkingProcesses, getNumWorkingProcesses:Nat;
act r_getNumIdleProcesses, s_getNumIdleProcesses, getNumIdleProcesses:Nat;


act s__prListLock_acquire,r__prListLock_acquire,__prListLock_acquire;
act s__prListLock_release,r__prListLock_release,__prListLock_release;

proc __prListLock = 
	r__prListLock_acquire.
	r__prListLock_release.
__prListLock;

proc ProcessPool_mem(__minSize:Nat,__maxSize:Nat,__maxQueuedRequests:Nat,__pendingQueue:List(Task), __resultsQueue:List(Task), __stopEvent:Bool, __workersDict:List(Worker), __draining:Bool) = 
        r_getMaxSize(__maxSize).
	  ProcessPool_mem(__minSize, __maxSize, __maxQueuedRequests, __pendingQueue, __resultsQueue, __stopEvent, __workersDict, __draining)
        +
        r_getMinSize(__minSize).
        ProcessPool_mem(__minSize, __maxSize, __maxQueuedRequests, __pendingQueue, __resultsQueue, __stopEvent, __workersDict, __draining)
	+
	%r_getNumWorkingProcesses(getWorkingProcesses(__workersDict)). %% TODO: implement map getWorkingPocesses
	r_getNumWorkingProcesses(0). 
	ProcessPool_mem(__minSize, __maxSize, __maxQueuedRequests, __pendingQueue, __resultsQueue, __stopEvent, __workersDict, __draining)
	+
	%r_getNumIdleProcesses(getIdleProcesses(__workersDict). %% TODO: implement map getIdlePocesses
	r_getNumIdleProcesses(1).
	ProcessPool_mem(__minSize, __maxSize, __maxQueuedRequests, __pendingQueue, __resultsQueue, __stopEvent, __workersDict, __draining)
;

proc ProcessPool = Proc_getNumWorkingProcesses.Proc_getNumIdleProcesses.ProcessPool;

proc Proc_getNumWorkingProcesses = 
  s__prListLock_acquire. 
    sum wp:Nat.s_getNumWorkingProcesses(wp).
  s__prListLock_release;

proc Proc_getNumIdleProcesses = 
  s__prListLock_acquire. 
    sum wp:Nat.s_getNumIdleProcesses(wp).
  s__prListLock_release;
  
%% ============ END ProcessPool

%% ============ START WorkingProcess
act r_isWorking, s_isWorking, isWorking:Bool;
act r_taskProcessed, s_taskProcessed, taskProcessed:Nat;
act r_runWatchdogThread, s_runWatchdogThread, runWatchdogThread:Nat#Nat;
act doSomething, doSomethingElse;

proc WorkingProcess_mem(wpid:Nat, __working:Bool,__taskCounter:Nat,__pendingQueue:List(Task),__resultsQueue:List(Task),__stopEvent:Bool,__watchdogThread:Nat, __processThread:Nat,task:Task) = 
      r_isWorking(__working).
      WorkingProcess_mem(wpid, __working, __taskCounter, __pendingQueue, __resultsQueue, __stopEvent, __watchdogThread, __processThread, task)
    +
      r_taskProcessed(__taskCounter).
      WorkingProcess_mem(wpid, __working, __taskCounter, __pendingQueue, __resultsQueue, __stopEvent, __watchdogThread, __processThread, task)

;

proc WatchdogThread(wpid:Nat, wdtid:Nat) = runWatchdogThread(wpid,wdtid).doSomething.WatchdogThread(wpid,wdtid);  %% TODO: change if os.getppid() == 1:


proc WorkingProcess(wpid:Nat) = WorkingProcess_start(wpid);

%WorkingProcess_start(wpid:Nat) = s_runWatchdogThread(wpid, 1);
WorkingProcess_start(wpid:Nat) = WatchdogThread(wpid, 1) || doSomethingElse.doSomethingElse;


%% ============ END WorkingProcess

init block(  { r_getMaxSize, s_getMaxSize, r_getMinSize, s_getMinSize,
	  r_getNumWorkingProcesses,s_getNumWorkingProcesses,
	  r_getNumIdleProcesses,s_getNumIdleProcesses,
	  s__prListLock_acquire, r__prListLock_acquire,
	  s__prListLock_release, r__prListLock_release,
	  s_isWorking, r_isWorking,
	  s_taskProcessed, r_taskProcessed,
	  s_runWatchdogThread, r_runWatchdogThread
	  },
       comm( { r_getMaxSize|s_getMaxSize->getMaxSize,
        r_getMinSize | s_getMinSize -> getMinSize,
        r_getNumWorkingProcesses | s_getNumWorkingProcesses -> getNumWorkingProcesses,
        r_getNumIdleProcesses | s_getNumIdleProcesses -> getNumIdleProcesses,
        s__prListLock_acquire | r__prListLock_acquire -> __prListLock_acquire,
        s__prListLock_release | r__prListLock_release -> __prListLock_release,
        s_isWorking | r_isWorking -> isWorking,
        s_taskProcessed | r_taskProcessed -> taskProcessed,
        s_runWatchdogThread | r_runWatchdogThread -> runWatchdogThread
       },
        ProcessPool_mem(1,8,10,[],[],false,[],false) || __prListLock || ProcessPool || 
        WorkingProcess_mem(1,false,0,[],[],false,1,1,T1) || WorkingProcess(1) %% this should be started by the ProcessPool
     ));
     
     
